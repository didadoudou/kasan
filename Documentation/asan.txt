AddressSanitizer
================


0. Overview
===========

AddressSanitizer (or ASAN) is a dynamic memory error detector. It provides fast
and comprehensive solution for use-after-free (UAF) and out-of-bounds (OOB)
bugs.

ASAN is better than all of CONFIG_DEBUG_PAGEALLOC/CONFIG_DEBUG_SLAB/
CONFIG_KMEMCHECK, because it:
 - is based on compiler instrumentation (fast),
 - detects OOB for both writes and reads,
 - provides strong UAF detection (based on delayed memory reuse),
 - does prompt detection of bad memory accesses,
 - prints informative reports.

ASAN can be enabled with CONFIG_KASAN=y (the kernel should be built with a
specific compiler, see the web page below), currently works only on x86_64,
supports only SLAB allocator.

More information is available at:
https://code.google.com/p/address-sanitizer/wiki/AddressSanitizerForKernel

TODO: slowdown and additional memory usage.

1. Reports
==========

A typical UAF report looks like this:

=========================================================================
AddressSanitizer: heap-use-after-free on address ffff8800230ef384
Write of size 4 by thread T12887:
 [<ffffffff811046dc>] ____call_usermodehelper+0x20c/0x230
 [<ffffffff81104733>] call_helper+0x33/0x40
 [<ffffffff8184226c>] ret_from_fork+0x7c/0xb0

Freed by thread T12636:
 [<ffffffff8110424c>] call_usermodehelper_freeinfo+0x2c/0x30
 [<ffffffff811049d5>] call_usermodehelper_exec+0xa5/0x1c0
 [<ffffffff811052b0>] call_usermodehelper+0x40/0x60
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150
 [<ffffffff8173c179>] netdev_register_kobject+0x139/0x1a0
 [<ffffffff8171f508>] register_netdevice+0x4d8/0x660
 [<ffffffff8171f6aa>] register_netdev+0x1a/0x30
 [<ffffffff81617d1a>] loopback_net_init+0x5a/0xd0
 [<ffffffff8170e64b>] ops_init+0x5b/0x1b0
 [<ffffffff8170e86b>] setup_net+0xcb/0x1f0
 [<ffffffff8170f1e8>] copy_net_ns+0x88/0x150
 [<ffffffff8111c537>] create_new_namespaces+0x1f7/0x2d0
 [<ffffffff8111c822>] unshare_nsproxy_namespaces+0x72/0xd0
 [<ffffffff810e10a1>] SyS_unshare+0x1c1/0x340

Allocated by thread T12636:
 [<ffffffff81104dfb>] call_usermodehelper_setup+0x5b/0x170
 [<ffffffff811052a1>] call_usermodehelper+0x31/0x60
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150
 [<ffffffff8173c179>] netdev_register_kobject+0x139/0x1a0
 [<ffffffff8171f508>] register_netdevice+0x4d8/0x660
 [<ffffffff8171f6aa>] register_netdev+0x1a/0x30
 [<ffffffff81617d1a>] loopback_net_init+0x5a/0xd0
 [<ffffffff8170e64b>] ops_init+0x5b/0x1b0
 [<ffffffff8170e86b>] setup_net+0xcb/0x1f0
 [<ffffffff8170f1e8>] copy_net_ns+0x88/0x150
 [<ffffffff8111c537>] create_new_namespaces+0x1f7/0x2d0
 [<ffffffff8111c822>] unshare_nsproxy_namespaces+0x72/0xd0
 [<ffffffff810e10a1>] SyS_unshare+0x1c1/0x340
 [<ffffffff81842312>] system_call_fastpath+0x16/0x1b

The buggy address ffff8800230ef384 is located 68 bytes inside
 of 96-byte region [ffff8800230ef340, ffff8800230ef3a0)

Memory state around the buggy address:
 ffff8800230eee00: ........ ....rrrr rrrrrrrr rrrrrrrr
 ffff8800230eef00: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef000: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef100: rrrrrrrr rrrrrrrr ........ ....rrrr
 ffff8800230ef200: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
>ffff8800230ef300: rrrrrrrr ffffffff ffffrrrr rrrrrrrr
                                     ^
 ffff8800230ef400: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef500: ........ ....rrrr rrrrrrrr rrrrrrrr
 ffff8800230ef600: rrrrrrrr rrrrrrrr rrrrrrrr ........
 ffff8800230ef700: ....rrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef800: rrrrrrrr rrrrrrrr ........ ....rrrr
Legend:
 f - 8 freed bytes
 r - 8 redzone bytes
 . - 8 allocated bytes
 x=1..7 - x allocated bytes + (8-x) redzone bytes
=========================================================================

If your kernel was compiled with CONFIG_DEBUG_INFO=y you can use addr2line
to get file and line info of each frame of the stack.

This can be also done via our symbolizer script (see the ASAN web page).
The script also symbolizes stack frames which come from dynamic modules.
As a result the report will be much easier to investigate.

Here is the report after symbolization:

=========================================================================
AddressSanitizer: heap-use-after-free on address ffff8800230ef384
Write of size 4 by thread T12887:
 [<ffffffff811046dc>] ____call_usermodehelper+0x20c/0x230 ./kernel/kmod.c:250
 [<ffffffff81104733>] call_helper+0x33/0x40 ./kernel/kmod.c:258
 [<ffffffff8184226c>] ret_from_fork+0x7c/0xb0 ./arch/x86/kernel/entry_64.S:554

Freed by thread T12636:
 [<ffffffff8110424c>] call_usermodehelper_freeinfo+0x2c/0x30 ./kernel/kmod.c:265
 [<ffffffff811049d5>] call_usermodehelper_exec+0xa5/0x1c0 ./kernel/kmod.c:612
 [<ffffffff811052b0>] call_usermodehelper+0x40/0x60 ./kernel/kmod.c:642
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620 ./lib/kobject_uevent.c:311
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10 ./lib/kobject_uevent.c:333
 [<     inlined    >] net_rx_queue_update_kobjects+0xaf/0x150 rx_queue_add_kobject ./net/core/net-sysfs.c:771
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150 ./net/core/net-sysfs.c:786
 [<     inlined    >] netdev_register_kobject+0x139/0x1a0 register_queue_kobjects ./net/core/net-sysfs.c:1165
 [<ffffffff8173c179>] netdev_register_kobject+0x139/0x1a0 ./net/core/net-sysfs.c:1336
 [<ffffffff8171f508>] register_netdevice+0x4d8/0x660 ./net/core/dev.c:5662
 [<ffffffff8171f6aa>] register_netdev+0x1a/0x30 ./net/core/dev.c:5774
 [<ffffffff81617d1a>] loopback_net_init+0x5a/0xd0 loopback.c:0
 [<ffffffff8170e64b>] ops_init+0x5b/0x1b0 ./net/core/net_namespace.c:106
 [<ffffffff8170e86b>] setup_net+0xcb/0x1f0 ./net/core/net_namespace.c:167
 [<ffffffff8170f1e8>] copy_net_ns+0x88/0x150 ./net/core/net_namespace.c:254
 [<ffffffff8111c537>] create_new_namespaces+0x1f7/0x2d0 ./kernel/nsproxy.c:95
 [<ffffffff8111c822>] unshare_nsproxy_namespaces+0x72/0xd0 ./kernel/nsproxy.c:190
 [<     inlined    >] SyS_unshare+0x1c1/0x340 SYSC_unshare ./kernel/fork.c:1853
 [<ffffffff810e10a1>] SyS_unshare+0x1c1/0x340 ./kernel/fork.c:1804

Allocated by thread T12636:
 [<     inlined    >] call_usermodehelper_setup+0x5b/0x170 kmalloc ./include/linux/slab.h:404
 [<     inlined    >] call_usermodehelper_setup+0x5b/0x170 kzalloc ./include/linux/slab.h:645
 [<ffffffff81104dfb>] call_usermodehelper_setup+0x5b/0x170 ./kernel/kmod.c:540
 [<ffffffff811052a1>] call_usermodehelper+0x31/0x60 ./kernel/kmod.c:637
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620 ./lib/kobject_uevent.c:311
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10 ./lib/kobject_uevent.c:333
 [<     inlined    >] net_rx_queue_update_kobjects+0xaf/0x150 rx_queue_add_kobject ./net/core/net-sysfs.c:771
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150 ./net/core/net-sysfs.c:786
 [<     inlined    >] netdev_register_kobject+0x139/0x1a0 register_queue_kobjects ./net/core/net-sysfs.c:1165
 [<ffffffff8173c179>] netdev_register_kobject+0x139/0x1a0 ./net/core/net-sysfs.c:1336
 [<ffffffff8171f508>] register_netdevice+0x4d8/0x660 ./net/core/dev.c:5662
 [<ffffffff8171f6aa>] register_netdev+0x1a/0x30 ./net/core/dev.c:5774
 [<ffffffff81617d1a>] loopback_net_init+0x5a/0xd0 loopback.c:0
 [<ffffffff8170e64b>] ops_init+0x5b/0x1b0 ./net/core/net_namespace.c:106
 [<ffffffff8170e86b>] setup_net+0xcb/0x1f0 ./net/core/net_namespace.c:167
 [<ffffffff8170f1e8>] copy_net_ns+0x88/0x150 ./net/core/net_namespace.c:254
 [<ffffffff8111c537>] create_new_namespaces+0x1f7/0x2d0 ./kernel/nsproxy.c:95
 [<ffffffff8111c822>] unshare_nsproxy_namespaces+0x72/0xd0 ./kernel/nsproxy.c:190
 [<     inlined    >] SyS_unshare+0x1c1/0x340 SYSC_unshare ./kernel/fork.c:1853
 [<ffffffff810e10a1>] SyS_unshare+0x1c1/0x340 ./kernel/fork.c:1804
 [<ffffffff81842312>] system_call_fastpath+0x16/0x1b ./arch/x86/kernel/entry_64.S:629

The buggy address ffff8800230ef384 is located 68 bytes inside
 of 96-byte region [ffff8800230ef340, ffff8800230ef3a0)

Memory state around the buggy address:
 ffff8800230eee00: ........ ....rrrr rrrrrrrr rrrrrrrr
 ffff8800230eef00: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef000: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef100: rrrrrrrr rrrrrrrr ........ ....rrrr
 ffff8800230ef200: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
>ffff8800230ef300: rrrrrrrr ffffffff ffffrrrr rrrrrrrr
                                     ^
 ffff8800230ef400: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef500: ........ ....rrrr rrrrrrrr rrrrrrrr
 ffff8800230ef600: rrrrrrrr rrrrrrrr rrrrrrrr ........
 ffff8800230ef700: ....rrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef800: rrrrrrrr rrrrrrrr ........ ....rrrr
Legend:
 f - 8 freed bytes
 r - 8 redzone bytes
 . - 8 allocated bytes
 x=1..7 - x allocated bytes + (8-x) redzone bytes
=========================================================================

Let's take a closer look at different parts of the report.

The header tells us what kind of bug happend and where:

AddressSanitizer: heap-use-after-free on address ffff8800230ef384
Write of size 4 by thread T12887:
 [<ffffffff811046dc>] ____call_usermodehelper+0x20c/0x230 ./kernel/kmod.c:250
 [<ffffffff81104733>] call_helper+0x33/0x40 ./kernel/kmod.c:258
 [<ffffffff8184226c>] ret_from_fork+0x7c/0xb0 ./arch/x86/kernel/entry_64.S:554

Here we can see that 4 bytes were written to a freed memory region in function
____call_usermodehelper() which was called by thread T12887.

The address of the instruction that caused the bad access is also present, but
since the report was symbolized we can look at the file and line info instead.

By looking in kernel/kmod.c, line 250 we can see that the report was caused by
assigning some value to sub_info->retval.

202 static int ____call_usermodehelper(void *data)
203 {
...
248         /* Exec failed? */
249 fail:
250         sub_info->retval = retval;
251         do_exit(0);
252 }

Since this is a use-after-free bug the sub_info was apparently freed somewhere.
The report provides information about where it happened:

Freed by thread T12636:
 [<ffffffff8110424c>] call_usermodehelper_freeinfo+0x2c/0x30 ./kernel/kmod.c:265
 [<ffffffff811049d5>] call_usermodehelper_exec+0xa5/0x1c0 ./kernel/kmod.c:612
 [<ffffffff811052b0>] call_usermodehelper+0x40/0x60 ./kernel/kmod.c:642
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620 ./lib/kobject_uevent.c:311
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10 ./lib/kobject_uevent.c:333
 [<     inlined    >] net_rx_queue_update_kobjects+0xaf/0x150 rx_queue_add_kobject ./net/core/net-sysfs.c:771
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150 ./net/core/net-sysfs.c:786
 [<     inlined    >] netdev_register_kobject+0x139/0x1a0 register_queue_kobjects ./net/core/net-sysfs.c:1165
 [<ffffffff8173c179>] netdev_register_kobject+0x139/0x1a0 ./net/core/net-sysfs.c:1336
 [<ffffffff8171f508>] register_netdevice+0x4d8/0x660 ./net/core/dev.c:5662
 [<ffffffff8171f6aa>] register_netdev+0x1a/0x30 ./net/core/dev.c:5774
 [<ffffffff81617d1a>] loopback_net_init+0x5a/0xd0 loopback.c:0
 [<ffffffff8170e64b>] ops_init+0x5b/0x1b0 ./net/core/net_namespace.c:106
 [<ffffffff8170e86b>] setup_net+0xcb/0x1f0 ./net/core/net_namespace.c:167
 [<ffffffff8170f1e8>] copy_net_ns+0x88/0x150 ./net/core/net_namespace.c:254
 [<ffffffff8111c537>] create_new_namespaces+0x1f7/0x2d0 ./kernel/nsproxy.c:95
 [<ffffffff8111c822>] unshare_nsproxy_namespaces+0x72/0xd0 ./kernel/nsproxy.c:190
 [<     inlined    >] SyS_unshare+0x1c1/0x340 SYSC_unshare ./kernel/fork.c:1853
 [<ffffffff810e10a1>] SyS_unshare+0x1c1/0x340 ./kernel/fork.c:1804

The report shows that sub_info was freed by call_usermodehelper_freeinfo()
in kernel/kmod.c, line 265:

261 static void call_usermodehelper_freeinfo(struct subprocess_info *info)
262 {
263         if (info->cleanup)
264                 (*info->cleanup)(info);
265         kfree(info);
266 }

You can see where the allocation happened as well:

Allocated by thread T12636:
 [<     inlined    >] call_usermodehelper_setup+0x5b/0x170 kmalloc ./include/linux/slab.h:404
 [<     inlined    >] call_usermodehelper_setup+0x5b/0x170 kzalloc ./include/linux/slab.h:645
 [<ffffffff81104dfb>] call_usermodehelper_setup+0x5b/0x170 ./kernel/kmod.c:540
 [<ffffffff811052a1>] call_usermodehelper+0x31/0x60 ./kernel/kmod.c:637
 [<ffffffff8146c15e>] kobject_uevent_env+0x5ee/0x620 ./lib/kobject_uevent.c:311
 [<ffffffff8146c19b>] kobject_uevent+0xb/0x10 ./lib/kobject_uevent.c:333
 [<     inlined    >] net_rx_queue_update_kobjects+0xaf/0x150 rx_queue_add_kobject ./net/core/net-sysfs.c:771
 [<ffffffff8173bd7f>] net_rx_queue_update_kobjects+0xaf/0x150 ./net/core/net-sysfs.c:786
 [<     inlined    >] netdev_register_kobject+0x139/0x1a0 register_queue_kobjects ./net/core/net-sysfs.c:1165
 [<ffffffff8173c179>] netdev_register_kobject+0x139/0x1a0 ./net/core/net-sysfs.c:1336
 [<ffffffff8171f508>] register_netdevice+0x4d8/0x660 ./net/core/dev.c:5662
 [<ffffffff8171f6aa>] register_netdev+0x1a/0x30 ./net/core/dev.c:5774
 [<ffffffff81617d1a>] loopback_net_init+0x5a/0xd0 loopback.c:0
 [<ffffffff8170e64b>] ops_init+0x5b/0x1b0 ./net/core/net_namespace.c:106
 [<ffffffff8170e86b>] setup_net+0xcb/0x1f0 ./net/core/net_namespace.c:167
 [<ffffffff8170f1e8>] copy_net_ns+0x88/0x150 ./net/core/net_namespace.c:254
 [<ffffffff8111c537>] create_new_namespaces+0x1f7/0x2d0 ./kernel/nsproxy.c:95
 [<ffffffff8111c822>] unshare_nsproxy_namespaces+0x72/0xd0 ./kernel/nsproxy.c:190
 [<     inlined    >] SyS_unshare+0x1c1/0x340 SYSC_unshare ./kernel/fork.c:1853
 [<ffffffff810e10a1>] SyS_unshare+0x1c1/0x340 ./kernel/fork.c:1804
 [<ffffffff81842312>] system_call_fastpath+0x16/0x1b ./arch/x86/kernel/entry_64.S:629

The first two frames of the allocation stack are the inlined calls of kmalloc
and kzalloc, which are defined in include/linux/slab.h. And the actual
allocation happened in kernel/kmod.c, line 540:

533 struct subprocess_info *call_usermodehelper_setup(char *path, char **argv,
534                 char **envp, gfp_t gfp_mask,
535                 int (*init)(struct subprocess_info *info, struct cred *new),
536                 void (*cleanup)(struct subprocess_info *info),
537                 void *data)
538 {
539         struct subprocess_info *sub_info;
540         sub_info = kzalloc(sizeof(struct subprocess_info), gfp_mask);
...
553         return sub_info;
554 }

Then, the report shows the address of the bad access and the memory range of
the allocated memory block to which it belongs:

The buggy address ffff8800230ef384 is located 68 bytes inside
 of 96-byte region [ffff8800230ef340, ffff8800230ef3a0)

Apparently, sizeof(struct subprocess_info) is 96 bytes and the retval field
is 68 bytes within the struct (you can find subprocess_info struct definition
in include/linux/kmod.h, line 56).

Finally, the report shows memory state around the accessed address:

Memory state around the buggy address:
 ffff8800230eee00: ........ ....rrrr rrrrrrrr rrrrrrrr
 ffff8800230eef00: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef000: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef100: rrrrrrrr rrrrrrrr ........ ....rrrr
 ffff8800230ef200: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
>ffff8800230ef300: rrrrrrrr ffffffff ffffrrrr rrrrrrrr
                                     ^
 ffff8800230ef400: rrrrrrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef500: ........ ....rrrr rrrrrrrr rrrrrrrr
 ffff8800230ef600: rrrrrrrr rrrrrrrr rrrrrrrr ........
 ffff8800230ef700: ....rrrr rrrrrrrr rrrrrrrr rrrrrrrr
 ffff8800230ef800: rrrrrrrr rrrrrrrr ........ ....rrrr
Legend:
 f - 8 freed bytes
 r - 8 redzone bytes
 . - 8 allocated bytes
 x=1..7 - x allocated bytes + (8-x) redzone bytes

Reading this part requires some more undestanding of how ASAN works.

Each 8 bytes of memory can be marked as addressable, partially addressable,
freed or they can be part of a redzone.
If 8 bytes are marked as addressable that means that they belong to some
allocated memory block and it is possible to read or modify any of these
8 bytes. Addressable 8 bytes are indicated by '.' in the report.
When only the first N bytes out of 8 belong to an allocated memory block,
the 8 bytes are partially addressable. These 8 bytes are indicated by 'N'.
8 freed bytes are indicated by 'f' and 8 redzone bytes - by 'r'.

In the report above the arrows point to the letter 'f', which means that the
accessed address is marked as freed.


2. Technical description
========================

From a high level, our approach to memory error detection is similar to that
of kmemcheck: use shadow memory to record whether each byte of memory is safe
to access, and use instrumentation to check the shadow memory on each memory
access. However, ASAN uses a more efficient shadow mapping, a more compact
shadow encoding and is faster than kmemcheck.

ASAN consists of two parts: an instrumentation module and a run-time library.
The instrumentation module modifies the code to check the address state for
each memory access. The current implementation is based on the GCC compiler.
The run-time library replaces kmem_cache_alloc, kmem_cache_free and related
functions, creates redzones around allocated memory regions, delays the reuse
of freed memory regions, and does error reporting.

XXX: better name than run-time library?


2.1. Shadow memory
==================

AddressSanitizer dedicates one-eighth of the physical memory to its shadow
memory and uses direct mapping with a scale and offset to translate a memory
address to its corresponding shadow address. Given the memory address Addr,
the address of the shadow byte is computed as (Addr >> 3) + Offset. If Max - 1
is the maximum valid address in the memory, the value of Offset should be
chosen in such a way that the region from Offset to Offset + Max / 8 is not
occupied at startup.

The figure below shows the address space layout. The physical memory is split
into two parts (low and high) which map to the corresponding shadow regions.
Applying the shadow mapping to addresses in the shadow region gives us
addresses in the Bad region.

|--------|        |--------|
| Memory |----    | Memory |
|--------|    \   |--------|
| Shadow |--   -->| Shadow |
|--------|  \     |--------|
|   Bad  |   ---->|  Bad   |
|--------|  /     |--------|
| Shadow |--   -->| Shadow |
|--------|    /   |--------|
| Memory |----    | Memory |
|--------|        |--------|

Each shadow byte corresponds to 8 bytes of the main memory. We use the
following encoding for each shadow byte: 0 means that all 8 bytes of the
corresponding memory region are addressable; k (1 <= k <= 7) means that
the first k bytes are addressable; any negative value indicates that the entire
8-byte word is unaddressable. We use different negative values to distinguish
between different kinds of unaddressable memory (redzones, freed memory).

Poisoning or unpoisoning a byte in the main memory means writing some special
value into the corresponding shadow memory. This value indicates whether the
byte is addressable or not.


2.2. Instrumentation
====================

ASAN requires the kernel to be built with a specific compiler. This compiler
adds memory address checking instructions before every memory access. These
instructions include checking if the accessed memory region is poisoned and
printing a report if yes.

When instrumenting an 8-byte memory access, ASAN computes the address of the
corresponding shadow byte, loads that byte, and checks whether it is zero:

0 ShadowAddr = (Addr >> 3) + Offset;
1 if (*ShadowAddr != 0)
2         ReportAndCrash(Addr);

When instrumenting 1-, 2-, or 4- byte accesses, the instrumentation is slightly
more complex: if the shadow value is positive (i.e., only the first k bytes in
the 8-byte word are addressable) we need to compare the 3 last bits of the
address with k.

0 ShadowAddr = (Addr >> 3) + Offset;
1 k = *ShadowAddr;
2 if (k != 0 && ((Addr & 7) + AccessSize > k))
3         ReportAndCrash(Addr);

2.3. Run-time library
=====================

The main purpose of the run-time library is to manage the shadow memory. At
kernel startup the entire shadow region is reserved so that no other part of
the kernel can use it.

The kmem_cache_alloc (kmalloc) and kmem_cache_free (kfree) functions are
replaced with a specialized implementation. The kmem_cache_alloc function
allocates extra memory, the redzone, around the returned region. The redzones
are marked as unaddressable, or poisoned. The larger the redzone, the larger
the overflows or underflows that will be detected. The redzone is used to
store some internal data (such as the allocation size, thread ID, etc.).

The kmem_cache_free function poisons the entire memory region and puts it into
quarantine, such that this region will not be allocated by kmem_cache_alloc any
time soon. Currently, the quarantine is implemented as a FIFO queue which holds
a fixed amount of memory at any time.

kmem_cache_alloc and kmem_cache_free record the current call stack in order to
provide more informative bug reports. The kmem_cache_alloc and kmem_cache_free
call stacks are stored in the redzone (the larger the redzone, the larger the
number of frames that can be stored).


3. Implementation details
=========================

In this section you will find some details of how the instrumentation module
and the run-time library are implemented.


3.1. Shadow memory
==================

In x86_64 the physical memory is directly mapped to the part of the virtual
memory with the address range of [0xffff880000000000, 0xffffc7ffffffffff].
It means that the physical memory can be accessed through the virtual memory.
ASAN is tracking accesses only to this mapped part of the virtual memory.
Therefore ASAN can't detect bad accesses to the virtual memory blocks
allocated with vmalloc.

During the kernel boot part of the physical memory is reserved for the shadow
memory. The shadow memory size depends on the amount of the available physical
memory and is calculated as (max_pfn << PAGE_SHIFT) >> SHADOW_SCALE, where
max_pfn is the number of physical memory pages we have available, PAGE_SHIFT
is the number of bits to shift one bit left to get the PAGE_SIZE value and
SHADOW_SCALE is currently 3.

The offset of the shadow memory within the physical memory can be configured
as CONFIG_KASAN_SHADOW_OFFSET, the default value is 0x36400600. To use the
default value at least 1 GB of physical memory is required.

Since the current implementation relies on the fact that sizeof(unsigned long)
equals (1 << SHADOW_SCALE), changing SHADOW_SCALE would probably require some
other fixes.

Since physical memory can contain garbage values on boot, the shadow memory
may contain garbage values as well. Therefore the shadow memory should be
initially filled with 0 to indicate that the physical memory is unpoisoned.

When the shadow memory is reserved, asan_enabled flag is set to 1. Each time
a memory access happens the checking instructions first check asan_enabled
to ensure that the shadow memory is initialized.

The shadow memory region itself is also poisoned and accesses to this region
are detected and reported as wild-memory-access'es.


3.2. Instrumentation
====================

Instrumentation is implemented as a pass of the GCC compiler. Before each of
the memory accesses of size 1, 2, 4, 8 or 16 a specific function is called,
which checks addressability of the accessed address range.

There is a separate function for each access size and type:
__kasan_read1, _kasan_write1, ..., __kasan_read16, __kasan_write16.
Each of these functions except for the last two checks only one shadow bytes,
the last two check two shadow bytes.

The shadow mapping described above actually looks like:
0 ShadowAddr = ((Addr - PAGE_OFFSET) >> 3) + PAGE_OFSSET + SHADOW_OFFSET;
But this can be easily transformed into:
0 Offset = PAGE_OFFSET + SHADOW_OFFSET - (PAGE_OFFSET >> 3)
1 ShadowAddr = (Addr >> 3) + Offset;
Where PAGE_OFFSET = 0xffff880000000000 is the start of the physical memory
mapping region in the virtual memory.

We also check if the address lies in the user-space virtual address range
and report it as a user-memory-access in case it does.

The address checking is performed as follows:
1. Check that asan_enabled flag is 1 (see above).
2. Check if the address lies within the user-space memory range.
3. Check that the address lies within the physical memory (using max_pfn).
4. Check the according shadow byte(s) (see above).

Since some of the libc functions (memset, memcpy and memmove in x86_64) are
written in assembly, the compiler can't instrument memory accesses inside them.
To solve this issue we replace these functions with our own instrumented
functions using #define macros (see arch/x86/include/asm/string_64.h).

Some of the kernel code may define and use it's own memset, mempy or memmove
(e.g. arch/x86/boot/compressed/misc.h). In that case we may not want to
intercept these functions. For that ASAN provides ASAN_NO_INTERCEPTORS macro
which should be defined before the calls to these functions. Another way to
disable interception of one particular function is put the function name in
brackets, like: (memset)(&value, 0, sizeof(value)).


3.3. Run-time library
=====================

3.3.1. Redzones
===============

Each time a new slab cache is created with kmem_cache_create the size of this
cache (the size of the objects that can be allocated from this cache) is
increased by ASAN_REDZONE_SIZE. When an object is allocated from this cache,
the last ASAN_REDZONE_SIZE bytes are considered to be the redzone and poisoned
appropriately.

As a result, slabs with on-slab descriptor look like:

|---------------------------------------------------------------------------|
| Descriptor | Object | Redzone | Object | Redzone | ... | Object | Redzone |
|---------------------------------------------------------------------------|

And slabs with off-slab descriptor look like:

|--------------------------------------------------------------|
| Object | Redzone | Object | Redzone | ... | Object | Redzone |
|--------------------------------------------------------------|

As you can see the first object in each slab doesn't have a redzone to the left
(unless the slab descriptor is on-slab or another slab lies to the left).
Therefore out-of-bounds to the left of the first objects may not be detected.

Currently, the redzones have the following format:

struct redzone {
        unsigned int alloc_stack[16];
        unsigned int free_stack[16];

        int alloc_thread_id;
        int free_thread_id;

        struct list_head quarantine_list;

	unsigned long kmalloc_size;
};

The redzone format is mostly self-explanatory: alloc_stack and free_stack are
the allocation and deallocations stack frames' addresses compressed to 32 bits
(the first 32 bits of a frame are always 0xffffffff, so we just drop them),
alloc_thread_id and free_thread_id are the identifiers of the threads in which
the allocation and deallocation happened, quarantine_list is the list_head for
the quarantine queue, kmalloc_size is used when an object was allocated via
kmalloc (or krealloc) and it holds the actual size that was passed to kmalloc.

The size of each redzone equals to the size of the redzone struct.

When a bad access happend we should print approprate meta information stored
in the redzone, and for that we need to find the redzone itself, as when a
bad access happens we know only the accessed address. We assume that the
accessed address is not far away from the memory block it was meant to be in.

The accessed memory address can be in one of the following states:
1) in a redzone, 2) in a kmalloc redzone, 3) freed or 4) in the Bad region.
In the 4th case we don't want to search for the redzone as there is none.
In the 3rd case the redzone should be to the right of the freed memory block.
In the 2nd case the redzone should be to the right of the kmalloc redzone.
In the 1st case we may have underflowed or overflowed the memory region.
We calculate the distance to the object to the left and the distance to
the object to the right and depending on which one is closer we select the
according redzone.

Currently the objects in the caches larger than 4 mb don't have redzones.

3.3.2. Poisoning / unpoisoning
==============================

A shadow byte can be equal to a few values besides 0, 1, ..., 7:

|----------------------------------------------------------------------|
| Name                      | Value | Meaning (for all 8 bytes)        |
|----------------------------------------------------------------------|
| ASAN_HEAP_REDZONE         | 0xfa  | in a redzone                     |
| ASAN_HEAP_KMALLOC_REDZONE | 0xfb  | in a kmalloc redzone (see below) |
| ASAN_HEAP_FREE            | 0xfd  | in a freed region                |
| ASAN_SHADOW_GAP           | 0xfe  | in the Bad region                |
|----------------------------------------------------------------------|

When a new slab is created the pages allocated for this slab are poisoned as
ASAN_HEAP_REDZONE. This includes the slab descriptor (in case it is on-slab),
the objects in the slab, the redzones around the objects. Each time a slab is
destroyed the allocated pages are unpoisoned.

When a new object is allocated from a cache the object is unpoisoned and
allocation metainfo is stored in the redzone (the redzone is still poisoned).
Each time a user tries to free an object from a cache the object is poisoned
as ASAN_HEAP_FREE and deallocation metainfo is stored in the redzone. The
object is not actually freed at this stage.

The objects allocated via kmalloc (or krealloc) are poisoned more accurately.
When a user asks for an N bytes object and the kmalloc cache of size K is used
for the allocation the object is allocated and unpoisoned as described above.
Then the last K - N bytes are poisoned as ASAN_HEAP_KMALLOC_REDZONE again.
When a user tries to free an object allocated via kmalloc the whole slab object
as poisoned including the last K - N bytes.

Since kmalloc may internally round up allocations and return more memory than
requested and the caller may use this additional memory, accesses to this
memory will be reported by ASAN, even if they are not actual bugs.
To supress some of the false positives caused by kmalloc we replace ksize
implementation with our own, which returns the size that was requested by
kmalloc (or krealloc) in case the memory was allocated via these functions.

The whole Bad region is poisoned as ASAN_SHADOW_GAP.


3.3.3. Quarantine
=================

Quarantine is implemented as a kernel linked list which acts as a FIFO queue
with list_head stored in the object's redzone.

Freeing objects from the quarantine can't be done in the kmem_cache_free right
after a new object was added into the queue due to some deadlock issues.
Instead, objects are freed when a new slab is created. This should not cause
out-of-memory, since to allocate new memory a new slab should be created
and the quarantine will be cleaned.

When a cache is destroyed via kmem_cache_destroy it can still have some
allocated objects inside, since they could be not freed yet but put into the
quarantine. Therefore, each time some cache is destroyed the quarantine is
checked for any objects from this cache and the found objects are freed.

Qurantine size can be configured by CONFIG_KASAN_QUARANTINE_SIZE.
